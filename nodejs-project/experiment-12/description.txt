Concurrent Ticket Booking System
 ### Project Description

This project is about building a ticket booking API using Node.js and Express.js, simulating a real-world scenario where multiple users may attempt to book the same seat at the same time. The core challenge is preventing double-booking through proper concurrency handling.

The solution uses a seat locking mechanism:

When a user selects a seat, it gets temporarily locked (e.g., for one minute).

Only that user can confirm the booking within the lock period.

If not confirmed, the lock expires automatically, making the seat available again.

The system maintains seat states—available, locked, booked—in an in-memory data structure for simplicity.

Endpoints allow users to view seats, lock a seat, and confirm bookings, with clear error handling for invalid actions (e.g., locking an already booked seat).

### Key Learnings

Concurrency & Race Condition Handling

Learned to manage simultaneous requests using a locking mechanism to ensure data integrity.

Complex State Management

Designed an in-memory structure to track seat status, lock ownership, and lock expiration.

Multi-Step Workflow Design

Practiced implementing transaction-like flows (view → lock → confirm), common in booking and checkout systems.

Asynchronous Timers

Used setTimeout to automatically release seat locks after expiration, handling time-sensitive logic.

Robust Business Logic

Implemented rules beyond CRUD to reflect real-world booking behavior.

Defensive Programming

Anticipated edge cases (e.g., trying to lock a booked seat) and added clear error handling for resilience.